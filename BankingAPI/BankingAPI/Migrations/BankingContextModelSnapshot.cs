// <auto-generated />
using System;
using BankingAPI.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingAPI.Migrations
{
    [DbContext(typeof(BankingContext))]
    partial class BankingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Address_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddressId"));

                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("Account_No_FK");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("City");

                    b.Property<string>("DoorNo")
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Door_No");

                    b.Property<long>("Pincode")
                        .HasColumnType("bigint")
                        .HasColumnName("Pincode");

                    b.Property<string>("State")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("State");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Street_Name");

                    b.HasKey("AddressId");

                    b.HasIndex("AccountNo");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<long>("AccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Account_No");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountNo"));

                    b.Property<long>("ContactNo")
                        .HasColumnType("bigint")
                        .HasColumnName("Contact_No");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Password");

                    b.HasKey("AccountNo");

                    b.ToTable("Customer", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Corporate", b =>
                {
                    b.HasBaseType("Customer");

                    b.Property<int>("CompanyType")
                        .HasColumnType("int")
                        .HasColumnName("CompanyType");

                    b.Property<long>("ODLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("OD_Limit");

                    b.ToTable("Corporate", (string)null);
                });

            modelBuilder.Entity("Individual", b =>
                {
                    b.HasBaseType("Customer");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.ToTable("Individual", (string)null);
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.OwnsOne("FullName", "Name", b1 =>
                        {
                            b1.Property<long>("CustomerAccountNo")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("First_Name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Last_Name");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Middle_Name");

                            b1.HasKey("CustomerAccountNo");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerAccountNo");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Corporate", b =>
                {
                    b.HasOne("Customer", null)
                        .WithOne()
                        .HasForeignKey("Corporate", "AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Individual", b =>
                {
                    b.HasOne("Customer", null)
                        .WithOne()
                        .HasForeignKey("Individual", "AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
